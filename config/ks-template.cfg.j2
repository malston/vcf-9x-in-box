vmaccepteula
install --disk={{ install_disk }} --overwritevmfs
reboot

network --bootproto=static --vlanid={{ vlan_id }} --ip={{ host_ip }} --netmask={{ netmask }} --gateway={{ gateway }} --hostname={{ hostname }} --nameserver={{ dns_server }} --addvmportgroup=1
rootpw {{ root_password }}

%firstboot --interpreter=busybox

NVME_TIERING_DEVICE="{{ tiering_disk }}"
VMFS_DATASTORE_NAME="{{ datastore_name }}"
NTP_SERVER={{ ntp_server }}
SSH_ROOT_KEY="{{ ssh_key }}"
MANAGEMENT_VLAN={{ vlan_id }}
MANAGEMENT_VSWITCH_MTU={{ vswitch_mtu }}

# Ensure hostd is ready
while ! vim-cmd hostsvc/runtimeinfo; do
sleep 10
done

# enable & start SSH
vim-cmd hostsvc/enable_ssh
vim-cmd hostsvc/start_ssh

# enable & start ESXi Shell
vim-cmd hostsvc/enable_esx_shell
vim-cmd hostsvc/start_esx_shell

# Suppress ESXi Shell warning
esxcli system settings advanced set -o /UserVars/SuppressShellWarning -i 1

# Configure NTP
esxcli system ntp set -e true -s $NTP_SERVER

# Rename local VMFS datastore
vim-cmd hostsvc/datastore/rename datastore1 ${VMFS_DATASTORE_NAME}

# Enable & Configure NVMe Tiering
esxcli system settings kernel set -s MemoryTiering -v TRUE
esxcli system settings advanced set -o /Mem/TierNvmePct -i 100
esxcli system tierdevice create -d /vmfs/devices/disks/${NVME_TIERING_DEVICE}

/bin/generate-certificates

# Workaround required for AMD Ryzen-based CPU
echo 'monitor_control.disable_apichv ="TRUE"' >> /etc/vmware/config

# Install vSAN ESA Mock VIB
esxcli network firewall ruleset set -e true -r httpClient
esxcli software acceptance set --level CommunitySupported
esxcli software vib install -v https://github.com/lamw/nested-vsan-esa-mock-hw-vib/releases/download/1.0/nested-vsan-esa-mock-hw.vib --no-sig-check
esxcli network firewall ruleset set -e false -r httpClient

# Configure SSH keys if provided
if [ -n "${SSH_ROOT_KEY}" ]; then
    echo "${SSH_ROOT_KEY}" > /etc/ssh/keys-root/authorized_keys
fi

# Configure VM Network VLAN & MTU
esxcli network vswitch standard portgroup set -p "VM Network" -v ${MANAGEMENT_VLAN}
esxcli network vswitch standard set -m ${MANAGEMENT_VSWITCH_MTU} -v vSwitch0

reboot
